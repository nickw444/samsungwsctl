trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'

schedules:
- cron: '0 3 * * 6'
  displayName: "Weekly scheduled build"
  branches:
    include: 
      - 'master'
  always: true

pool:
  vmImage: ubuntu-latest

variables:
- name: python.version
  value: 3.x

parameters:
- name: step_install_dependencies
  type: stepList
  default:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'
    - script: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --system --dev
        pip install .
      displayName: 'Install Dependencies'

jobs:
  - job: check
    steps:
      - ${{ parameters.step_install_dependencies }}
      - script: flake8
        displayName: 'Check Formatting'
    displayName: "Check"
  - job: build
    displayName: "Build"
    strategy:
      matrix:
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python3x:
          python.version: '3.x'
    steps:
      - ${{ parameters.step_install_dependencies }}
      - script: |
          pip install wheel
        displayName: 'Install Build Dependencies'
      - script: |
          python setup.py bdist_wheel
        displayName: "Build"
  - job: release
    dependsOn: 
      - build
      - check
    displayName: "Release"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:
      - ${{ parameters.step_install_dependencies }}
      - task: TwineAuthenticate@1
        inputs:
          pythonUploadServiceConnection: 'samsungwsctl'
      - script: |
          pip install twine wheel
        displayName: 'Install Build Dependencies'
      - script: |
          sed -i '' "s/0.0.0-dev/$(git describe --exact-match)/" samsungwsctl.py
          python setup.py bdist_wheel
          python -m twine upload -r 'samsungwsctl' --config-file $(PYPIRC_PATH) dist/*.whl
        condition: and(succeeded(), eq(variables['python.version'], '3.x'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: "Release to PyPi"
      - task: GitHubRelease@1
        inputs:
          gitHubConnection: 'github.com_nickw444'
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'gitTag'
          assets: 
          isDraft: true
          changeLogCompareToRelease: 'lastFullRelease'
          changeLogType: 'commitBased'
